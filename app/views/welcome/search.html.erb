 <!-- Main -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
 <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
 <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
 <style>
   .center {
     margin-top:50px;
   }

   .modal-header {
     padding-bottom: 5px;
   }

   .modal-footer {
     padding: 0;
   }

   .modal-footer .btn-group button {
     height:40px;
     border-top-left-radius : 0;
     border-top-right-radius : 0;
     border: none;
     border-right: 1px solid #ddd;
   }

   .modal-footer .btn-group:last-child > button {
     border-right: 0;
   }
 </style>
<script>
  $(document).ready(function(){
    $(".categories").click(function(){
      $("#categoriesShow").slideToggle("slow");
    });
    $(".distance").click(function(){
      $("#distanceShow").slideToggle("slow");
    });
    $(".location").click(function(){
      $("#locationShow").slideToggle("slow");
    });
  });

  // Starrr plugin (https://github.com/dobtco/starrr)
  var __slice = [].slice;

  (function($, window) {
    var Starrr;

    Starrr = (function() {
      Starrr.prototype.defaults = {
        rating: void 0,
        numStars: 5,
        change: function(e, value) {}
      };

      function Starrr($el, options) {
        var i, _, _ref,
            _this = this;

        this.options = $.extend({}, this.defaults, options);
        this.$el = $el;
        _ref = this.defaults;
        for (i in _ref) {
          _ = _ref[i];
          if (this.$el.data(i) != null) {
            this.options[i] = this.$el.data(i);
          }
        }
        this.createStars();
        this.syncRating();

        this.$el.on('mouseout.starrr', function() {
          return _this.syncRating();
        });
        this.$el.on('click.starrr', 'span', function(e) {
          return _this.setRating(_this.$el.find('span').index(e.currentTarget) + 1);
        });
        this.$el.on('starrr:change', this.options.change);
      }

      Starrr.prototype.createStars = function() {
        var _i, _ref, _results;

        _results = [];
        for (_i = 1, _ref = this.options.numStars; 1 <= _ref ? _i <= _ref : _i >= _ref; 1 <= _ref ? _i++ : _i--) {
          _results.push(this.$el.append("<span class='glyphicon .glyphicon-star-empty'></span>"));
        }
        return _results;
      };

      Starrr.prototype.setRating = function(rating) {
        if (this.options.rating === rating) {
          rating = void 0;
        }
        this.options.rating = rating;
        this.syncRating();
        return this.$el.trigger('starrr:change', rating);
      };

      Starrr.prototype.syncRating = function(rating) {
        var i, _i, _j, _ref;

        rating || (rating = this.options.rating);
        if (rating) {
          for (i = _i = 0, _ref = rating - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
            this.$el.find('span').eq(i).removeClass('glyphicon-star-empty').addClass('glyphicon-star');
          }
        }
        if (rating && rating < 5) {
          for (i = _j = rating; rating <= 4 ? _j <= 4 : _j >= 4; i = rating <= 4 ? ++_j : --_j) {
            this.$el.find('span').eq(i).removeClass('glyphicon-star').addClass('glyphicon-star-empty');
          }
        }
        if (!rating) {
          return this.$el.find('span').removeClass('glyphicon-star').addClass('glyphicon-star-empty');
        }
      };

      return Starrr;

    })();
    return $.fn.extend({
      starrr: function() {
        var args, option;

        option = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        return this.each(function() {
          var data;

          data = $(this).data('star-rating');
          if (!data) {
            $(this).data('star-rating', (data = new Starrr($(this), option)));
          }
          if (typeof option === 'string') {
            return data[option].apply(data, args);
          }
        });
      }
    });
  })(window.jQuery, window);

  $(function() {
    return $(".starrr").starrr();
  });

  $( document ).ready(function() {

    $('#stars').on('starrr:change', function(e, value){
      $('#count').html(value);
    });

    $('#stars-existing').on('starrr:change', function(e, value){
      $('#count-existing').html(value);
    });
  });
</script>
<div id="main">
  <div class="inner">
    <div class="container">
      <div class="row">
        <div class="search">

        </div>
      </div>
    </div>
    <section>
      <%= form_tag :action => 'search' do %>
          <div class="row uniform">
            <div class="6u 12u$(xsmall)">
              <%= text_field_tag 'search_box',nil, placeholder: "Enter Search Items" %>
            </div>
            <div class="6u$ 12u$(xsmall)">
              <%= submit_tag 'Search'%>
            </div>
          </div>
      <% end %>
    </section>

    <br/>
    <header>
      <ul class="topnav" id="myTopnav">
        <li><a class="active">Filters: </a></li>
        <li><a href="#news">Price</a></li>
        <li><a href="#contact">A-Z</a></li>
        <li><a href="#about">Rating</a></li>
        <li class="location"><a>Location</a></li>
        <li class="distance"><a>Distance</a></li>
        <li class="categories"><a>Categories</a></li>
        <li class="icon">
          <a href="javascript:void(0);" style="font-size:15px;" onclick="myFunction()">☰</a>
        </li>
      </ul>
    </header>
    <section>
      <br/>
      <br/>
      <div class="row uniform" id="categoriesShow" hidden>
        <div class="6u 12u$(xsmall)">
          <%= text_field_tag 'category_box',nil, placeholder: "Enter Category" %>
        </div>
        <div class="6u$ 12u$(xsmall)">
          <%= submit_tag 'Filter'%>
        </div>
      </div>
      <div class="row uniform" id="locationShow" hidden>
        <div class="6u 12u$(xsmall)">
          <%= text_field_tag 'category_box',nil, placeholder: "Enter City" %>
        </div>
        <div class="6u$ 12u$(xsmall)">
          <%= submit_tag 'Filter'%>
        </div>
      </div>
      <div class="row uniform" id="distanceShow" hidden>
        <div class="6u 12u$(xsmall)">
          <%= text_field_tag 'category_box',nil, placeholder: "Filter Distance" %>
        </div>
        <div class="6u$ 12u$(xsmall)">
          <%= submit_tag 'Filter'%>
        </div>
      </div>
    </section>
    <br/>
    <br/>
    <div class = "default">
        <% @finalResult.each do |users| %>
            <p>
        <span class="image left">
          <%= image_tag("restaurant.jpg") %>
        </span>
              <b><h2><%= users["Vendor_Name"] %></h2></b>
              <b>Rating: </b>9.8/10<br/>
              <b>Address: </b><%= users["address"] %><br/>
              <b>Phone Number: </b><%= users["Vendor_PhoneNo"] %><br/>
              <b>Time : </b><%= users["time"] %>
              <table>
                <tr>
                  <td>
                    <%= button_to "Request"%>
                  </td>
                  <td>
                    <button data-toggle="modal" data-target="#squarespaceModal-<%= users["id"] %>" style="height: 40px;" >Reviews</button>

                  </td>
                </tr>
              </table>


          <!-- line modal -->
          <div class="modal fade" id="squarespaceModal-<%= users["id"] %>" tabindex="-1" role="dialog" aria-labelledby="modalLabel" aria-hidden="true">
            <div class="modal-dialog">
              <div class="modal-content">
                <div class="modal-header">
                  <button type="button" class="close" data-dismiss="modal" style="height: auto"><span aria-hidden="true">×</span><span class="sr-only">Close</span></button>
                  <h3 class="modal-title" id="lineModalLabel">Reviews</h3>
                </div>
                <div class="modal-body">

                  <!-- content goes here -->
                  <table>
                    <% users["Reviews"].each do |reviews| %>
                        <tr>
                          <td>
                            <div id="stars-existing" class="starrr" data-rating='<%= reviews["review_rating"] %>'></div>
                          </td>
                          <td>
                            <%= reviews["review_info"] %>
                          </td>
                        </tr>
                    <%end%>
                  </table>


                </div>
                <div class="modal-footer">
                  <div class="btn-group btn-group-justified" role="group" aria-label="group button">
                    <div class="btn-group" role="group">
                      <button type="button" class="btn btn-default" data-dismiss="modal"  role="button">Close</button>
                    </div>
                    <div class="btn-group btn-delete hidden" role="group">
                      <button type="button" id="delImage" class="btn btn-default btn-hover-red" data-dismiss="modal"  role="button">Delete</button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
              <br/>



            </p>g

        <%end %>
    </div>
    <div class = "lexico" hidden>
      <%
        sorted = @finalResult.sort_by { |k| k["Vendor_Name"] }
        puts "Ajinkya"
        puts sorted


      %>
      <a href = "">
        <% sorted.each do |users| %>
            <p>
        <span class="image left">
          <%= image_tag("restaurant.jpg") %>
        </span>
              <b><h2><%= users["Vendor_Name"] %></h2></b>
              <b>Rating: </b>9.8/10<br/>
              <b>Address: </b><%= users["address"] %><br/>
              <b>Phone Number: </b><%= users["Vendor_PhoneNo"] %><br/>
              <b>Time : </b><%= users["time"] %><br/><br/>
              <br/>
            </p>
        <%end %>
      </a>


    </div>

  </div>
  <br/>
  <br/>
  <div class="center">
    <ul class="pagination">
      <li><a href="#">«</a></li>
      <li><a href="#">1</a></li>
      <li><a class="active" href="#">2</a></li>
      <li><a href="#">3</a></li>
      <li><a href="#">4</a></li>
      <li><a href="#">5</a></li>
      <li><a href="#">6</a></li>
      <li><a href="#">7</a></li>
      <li><a href="#">»</a></li>
    </ul>
  </div>

  <body>
  <div id="locationField">
    <input id="autocomplete" placeholder="Enter your address"
           onFocus="geolocate()" type="text"></input>
  </div>

  <table id="address">
    <tr>
      <td class="label">Street address</td>
      <td class="slimField"><input class="field" id="street_number"
                                   disabled="true"></input></td>
      <td class="wideField" colspan="2"><input class="field" id="route"
                                               disabled="true"></input></td>
    </tr>
    <tr>
      <td class="label">City</td>
      <!-- Note: Selection of address components in this example is typical.
           You may need to adjust it for the locations relevant to your app. See
           https://developers.google.com/maps/documentation/javascript/examples/places-autocomplete-addressform
      -->
      <td class="wideField" colspan="3"><input class="field" id="locality"
                                               disabled="true"></input></td>
    </tr>
    <tr>
      <td class="label">State</td>
      <td class="slimField"><input class="field"
                                   id="administrative_area_level_1" disabled="true"></input></td>
      <td class="label">Zip code</td>
      <td class="wideField"><input class="field" id="postal_code"
                                   disabled="true"></input></td>
    </tr>
    <tr>
      <td class="label">Country</td>
      <td class="wideField" colspan="3"><input class="field"
                                               id="country" onclick=" return getLatLong()" disabled="true"></input></td>
    </tr>
  </table>
  <script>
    // This example displays an address form, using the autocomplete feature
    // of the Google Places API to help users fill in the information.

    // This example requires the Places library. Include the libraries=places
    // parameter when you first load the API. For example:
    // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">
    geolocate()
    var placeSearch, autocomplete;
    var componentForm = {
      street_number: 'short_name',
      route: 'long_name',
      locality: 'long_name',
      administrative_area_level_1: 'short_name',
      country: 'long_name',
      postal_code: 'short_name'
    };
  function getLatLong()
  {
    var add = document.getElementById('autocomplete').value;
    alert(add);
    var geo = new google.maps.Geocoder;
    geo.geocode({'address':add},function(results, status){
      if (status == google.maps.GeocoderStatus.OK) {
        var myLat = results[0].geometry.location;
        var myLng = results[0].geometry.longitude;
        alert(myLat +" : "+ myLng);
        // Add some code to work with myLatLng

      } else {
        alert("Geocode was not successful for the following reason: " + status);
      }
    });


  }
    function initAutocomplete() {
      // Create the autocomplete object, restricting the search to geographical
      // location types.
      autocomplete = new google.maps.places.Autocomplete(
          /** @type {!HTMLInputElement} */(document.getElementById('autocomplete')),
          {types: ['geocode']});

      // When the user selects an address from the dropdown, populate the address
      // fields in the form.
      autocomplete.addListener('place_changed', fillInAddress);
    }

    function fillInAddress() {
      // Get the place details from the autocomplete object.
      var place = autocomplete.getPlace();

      for (var component in componentForm) {
        document.getElementById(component).value = '';
        document.getElementById(component).disabled = false;
      }
      // Get each component of the address from the place details
      // and fill the corresponding field on the form.
      for (var i = 0; i < place.address_components.length; i++) {
        var addressType = place.address_components[i].types[0];
        if (componentForm[addressType]) {
          var val = place.address_components[i][componentForm[addressType]];
          document.getElementById(addressType).value = val;
        }

      }
    }
    // Bias the autocomplete object to the user's geographical location,
    // as supplied by the browser's 'navigator.geolocation' object.
    function geolocate() {
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(function(position) {
          var geolocation = {
            lat: position.coords.latitude,
            lng: position.coords.longitude
          };
          var circle = new google.maps.Circle({
            center: geolocation,
            radius: position.coords.accuracy
          });
          autocomplete.setBounds(circle.getBounds());
          //alert(position.coords.latitude + " : " +position.coords.longitude);
        });
      }
    }
    function distance(lat1, lon1, lat2, lon2) {
      var radlat1 = Math.PI * lat1/180
      var radlat2 = Math.PI * lat2/180
      var theta = lon1-lon2
      var radtheta = Math.PI * theta/180
      var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);
      dist = Math.acos(dist)
      dist = dist * 180/Math.PI
      dist = dist * 60 * 1.1515
      return dist
    }
  </script>
  <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDqtmR7Bep2EGbBVo9PWNVe8nlpntSF-dc&libraries=places&callback=initAutocomplete"
          async defer></script>
  </body>
</div>

